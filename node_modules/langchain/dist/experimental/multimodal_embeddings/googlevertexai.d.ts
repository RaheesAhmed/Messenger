/// <reference types="node" resolution-mode="require"/>
import { Embeddings, EmbeddingsParams } from "../../embeddings/base.js";
import { GoogleVertexAIBasePrediction, GoogleVertexAIConnectionParams, GoogleVertexAILLMResponse } from "../../types/googlevertexai-types.js";
export interface GoogleVertexAIMultimodalEmbeddingsParams extends EmbeddingsParams, GoogleVertexAIConnectionParams {
}
interface GoogleVertexAIMultimodalEmbeddingsInstance {
    text?: string;
    image?: {
        bytesBase64Encoded: string;
    };
}
interface GoogleVertexAIMultimodalEmbeddingsResults extends GoogleVertexAIBasePrediction {
    textEmbedding?: number[];
    imageEmbedding?: number[];
}
/**
 * The media should have a text property, an image property, or both.
 */
export type GoogleVertexAIMedia = {
    text: string;
    image?: Buffer;
} | {
    text?: string;
    image: Buffer;
};
export type MediaEmbeddings = {
    text?: number[];
    image?: number[];
};
export declare class GoogleVertexAIMultimodalEmbeddings extends Embeddings implements GoogleVertexAIMultimodalEmbeddingsParams {
    model: string;
    private connection;
    constructor(fields?: GoogleVertexAIMultimodalEmbeddingsParams);
    mediaToInstance(media: GoogleVertexAIMedia): GoogleVertexAIMultimodalEmbeddingsInstance;
    responseToEmbeddings(response: GoogleVertexAILLMResponse<GoogleVertexAIMultimodalEmbeddingsResults>): MediaEmbeddings[];
    embedMedia(media: GoogleVertexAIMedia[]): Promise<MediaEmbeddings[]>;
    embedMediaQuery(media: GoogleVertexAIMedia): Promise<MediaEmbeddings>;
    embedImage(images: Buffer[]): Promise<number[][]>;
    embedImageQuery(image: Buffer): Promise<number[]>;
    embedDocuments(documents: string[]): Promise<number[][]>;
    embedQuery(document: string): Promise<number[]>;
}
export {};
