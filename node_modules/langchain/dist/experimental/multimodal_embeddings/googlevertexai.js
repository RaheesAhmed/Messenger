import { Embeddings } from "../../embeddings/base.js";
import { GoogleVertexAIConnection } from "../../util/googlevertexai-connection.js";
export class GoogleVertexAIMultimodalEmbeddings extends Embeddings {
    constructor(fields) {
        super(fields ?? {});
        Object.defineProperty(this, "model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "multimodalembedding@001"
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.model = fields?.model ?? this.model;
        this.connection = new GoogleVertexAIConnection({ ...fields, ...this }, this.caller);
    }
    mediaToInstance(media) {
        const ret = {};
        if (media?.text) {
            ret.text = media.text;
        }
        if (media.image) {
            ret.image = {
                bytesBase64Encoded: media.image.toString("base64"),
            };
        }
        return ret;
    }
    responseToEmbeddings(response) {
        return response.data.predictions.map((r) => ({
            text: r.textEmbedding,
            image: r.imageEmbedding,
        }));
    }
    async embedMedia(media) {
        // Only one media embedding request is allowed
        return Promise.all(media.map((m) => this.embedMediaQuery(m)));
    }
    async embedMediaQuery(media) {
        const instance = this.mediaToInstance(media);
        const instances = [instance];
        const parameters = {};
        const options = {};
        const responses = await this.connection.request(instances, parameters, options);
        const result = this.responseToEmbeddings(responses);
        return result[0];
    }
    async embedImage(images) {
        return this.embedMedia(images.map((image) => ({ image }))).then((embeddings) => embeddings.map((e) => e.image ?? []));
    }
    async embedImageQuery(image) {
        return this.embedMediaQuery({
            image,
        }).then((embeddings) => embeddings.image ?? []);
    }
    async embedDocuments(documents) {
        return this.embedMedia(documents.map((text) => ({ text }))).then((embeddings) => embeddings.map((e) => e.text ?? []));
    }
    async embedQuery(document) {
        return this.embedMediaQuery({
            text: document,
        }).then((embeddings) => embeddings.text ?? []);
    }
}
