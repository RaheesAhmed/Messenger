import usearch from "usearch";
import { Embeddings } from "../embeddings/base.js";
import { SaveableVectorStore } from "./base.js";
import { Document } from "../document.js";
import { SynchronousInMemoryDocstore } from "../stores/doc/in_memory.js";
export interface USearchArgs {
    docstore?: SynchronousInMemoryDocstore;
    index?: usearch.Index;
    mapping?: Record<number, string>;
}
export declare class USearch extends SaveableVectorStore {
    _index?: usearch.Index;
    _mapping: Record<number, string>;
    docstore: SynchronousInMemoryDocstore;
    args: USearchArgs;
    _vectorstoreType(): string;
    constructor(embeddings: Embeddings, args: USearchArgs);
    addDocuments(documents: Document[]): Promise<string[]>;
    get index(): usearch.Index;
    private set index(value);
    addVectors(vectors: number[][], documents: Document[]): Promise<string[]>;
    similaritySearchVectorWithScore(query: number[], k: number): Promise<[Document<Record<string, any>>, number][]>;
    save(directory: string): Promise<void>;
    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: Embeddings, dbConfig?: {
        docstore?: SynchronousInMemoryDocstore;
    }): Promise<USearch>;
    static fromDocuments(docs: Document[], embeddings: Embeddings, dbConfig?: {
        docstore?: SynchronousInMemoryDocstore;
    }): Promise<USearch>;
}
