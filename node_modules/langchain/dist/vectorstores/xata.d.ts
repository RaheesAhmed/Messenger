import { BaseClient } from "@xata.io/client";
import { VectorStore } from "./base.js";
import { Embeddings } from "../embeddings/base.js";
import { Document } from "../document.js";
export interface XataClientArgs<XataClient> {
    readonly client: XataClient;
    readonly table: string;
}
type XataFilter = object;
export declare class XataVectorSearch<XataClient extends BaseClient> extends VectorStore {
    FilterType: XataFilter;
    private readonly client;
    private readonly table;
    _vectorstoreType(): string;
    constructor(embeddings: Embeddings, args: XataClientArgs<XataClient>);
    addDocuments(documents: Document[], options?: {
        ids?: string[];
    }): Promise<string[]>;
    addVectors(vectors: number[][], documents: Document[], options?: {
        ids?: string[];
    }): Promise<string[]>;
    delete(params: {
        ids: string[];
    }): Promise<void>;
    similaritySearchVectorWithScore(query: number[], k: number, filter?: XataFilter | undefined): Promise<[Document, number][]>;
}
export {};
