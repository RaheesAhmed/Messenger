import { SimpleChatModel } from "./base.js";
import { createOllamaStream } from "../util/ollama.js";
import { AIMessageChunk, ChatGenerationChunk, ChatMessage, } from "../schema/index.js";
export class ChatOllama extends SimpleChatModel {
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "llama2"
        });
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "http://localhost:11434"
        });
        Object.defineProperty(this, "mirostat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "mirostatEta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "mirostatTau", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "numCtx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "numGpu", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "numThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repeatLastN", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repeatPenalty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "temperature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "stop", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tfsZ", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "topK", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "topP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.model = fields.model ?? this.model;
        this.baseUrl = fields.baseUrl?.endsWith("/")
            ? fields.baseUrl.slice(0, -1)
            : fields.baseUrl ?? this.baseUrl;
        this.mirostat = fields.mirostat;
        this.mirostatEta = fields.mirostatEta;
        this.mirostatTau = fields.mirostatTau;
        this.numCtx = fields.numCtx;
        this.numGpu = fields.numGpu;
        this.numThread = fields.numThread;
        this.repeatLastN = fields.repeatLastN;
        this.repeatPenalty = fields.repeatPenalty;
        this.temperature = fields.temperature;
        this.stop = fields.stop;
        this.tfsZ = fields.tfsZ;
        this.topK = fields.topK;
        this.topP = fields.topP;
    }
    _llmType() {
        return "ollama";
    }
    invocationParams(options) {
        return {
            model: this.model,
            options: {
                mirostat: this.mirostat,
                mirostat_eta: this.mirostatEta,
                mirostat_tau: this.mirostatTau,
                num_ctx: this.numCtx,
                num_gpu: this.numGpu,
                num_thread: this.numThread,
                repeat_last_n: this.repeatLastN,
                repeat_penalty: this.repeatPenalty,
                temperature: this.temperature,
                stop: options?.stop ?? this.stop,
                tfs_z: this.tfsZ,
                top_k: this.topK,
                top_p: this.topP,
            },
        };
    }
    _combineLLMOutput() {
        return {};
    }
    async *_streamResponseChunks(input, options, runManager) {
        const stream = await this.caller.call(async () => createOllamaStream(this.baseUrl, {
            ...this.invocationParams(options),
            prompt: this._formatMessagesAsPrompt(input),
        }, options));
        for await (const chunk of stream) {
            yield new ChatGenerationChunk({
                text: chunk.response,
                message: new AIMessageChunk({ content: chunk.response }),
            });
            await runManager?.handleLLMNewToken(chunk.response ?? "");
        }
    }
    _formatMessagesAsPrompt(messages) {
        const formattedMessages = messages
            .map((message) => {
            let rolePrefix;
            if (message._getType() === "human") {
                rolePrefix = "Human: ";
            }
            else if (message._getType() === "ai") {
                rolePrefix = "Assistant: ";
            }
            else if (message._getType() === "system") {
                rolePrefix = "";
            }
            else if (ChatMessage.isInstance(message)) {
                rolePrefix = `${message.role}: `;
            }
            else {
                console.warn(`Unsupported message type passed to Ollama: "${message._getType()}"`);
                rolePrefix = "";
            }
            return `${rolePrefix}${message.content}`;
        })
            .join("\n");
        return `${formattedMessages}\nAssistant: `;
    }
    /** @ignore */
    async _call(messages, options) {
        const stream = await this.caller.call(async () => createOllamaStream(this.baseUrl, {
            ...this.invocationParams(options),
            prompt: this._formatMessagesAsPrompt(messages),
        }, options));
        const chunks = [];
        for await (const chunk of stream) {
            chunks.push(chunk.response);
        }
        return chunks.join("");
    }
}
